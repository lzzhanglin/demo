<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper  namespace = "com.spring.demo.mapper.ArticleMapper">
    <insert id="saveArticle"  parameterType="com.spring.demo.entity.Article"
                useGeneratedKeys="true" keyProperty="articleId">
            insert into article (title, content,user_id,category_id)
            values (#{title,jdbcType=VARCHAR},
                    #{content,jdbcType=VARCHAR},
                    #{userId,jdbcType=BIGINT},
                    #{categoryId,jdbcType=BIGINT})
    </insert>

    <update id="updateArticle" parameterType="com.spring.demo.entity.Article"
    useGeneratedKeys="true" keyProperty="articleId">
        update article
        set title = #{title},
            content = #{content},
            category_id = #{categoryId}
        where id = #{articleId}
    </update>

    <select id="getArticleList" resultType="com.spring.demo.entity.Article" parameterType="map">
        select u.username,
               a.id articleId,
               a.user_id userId,
               title,
               c.category_name categoryName,
               a.create_time createTime,
               content
            from article a
        left join user u
        on a.user_id = u.id
        left join category c
        on a.category_id = c.id
        <where>
        <if test="userId != null and userId !=''" >
            and  user_id = #{userId}
        </if>
    </where>
        order by a.create_time desc
                 limit #{offset},#{size}



    </select>

    <select id="getArticleTotalNum" resultType="int" parameterType="long">
        select count(title)
        from article
        where user_id = #{userId}




    </select>



    <delete id="deleteArticle" parameterType="long">
        delete from article
        <!--<if test="articleId !='' and articleId !=null">-->
        where id = #{articleId}
        <!--</if>-->
    </delete>

    <select id="viewArticleById" parameterType="long" resultType="com.spring.demo.entity.Article">
        select title ,
               content,
               category_id categoryId
            from
            article
        where id = #{articleId}

    </select>

    <select id="showArticleTitle" parameterType="java.util.List" resultType="com.spring.demo.entity.Article">
        SELECT title,
        a.id articleId,
        u.username authorName,
        create_time createTime
        from
        article a
        left join user u
        on a.user_id = u.id
        WHERE user_id in
        <foreach item="item" index="index" collection="userIdList"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
        order by create_time desc
    </select>





</mapper>
        <!--SELECT-->
        <!--title,-->
        <!--id articleId,-->
        <!--create_time createTime-->
        <!--FROM-->
        <!--article-->
        <!--where-->
        <!--<if test="userIdList != null and userIdList.size() != 0">-->

        <!--user_id in-->
        <!--<foreach collection="userIdList" item="userId"-->
        <!--index="index" open="(" close=")" separator=",">-->
        <!--                    #{userId}-->
        <!--</foreach>-->
        <!--</if>-->

        <!--order by create_time desc-->